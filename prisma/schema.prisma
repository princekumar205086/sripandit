datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL") 
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
}

enum Status {
  TRUE
  FALSE
}

enum AccountStatus {
  PENDING
  ACTIVE
  SUSPENDED
  DEACTIVATED
}

model User {
  id                        Int                                 @id @default(autoincrement())
  username                  String
  email                     String                              @unique
  contact                   String?
  password                  String
  date_of_reg               DateTime                            @default(now())
  account_status            AccountStatus  @default(PENDING)
  verifyToken               String?                             @db.VarChar(255)
  verifyTokenExpiry         DateTime?
  forgotPasswordToken       String?                             @db.VarChar(255)
  forgotPasswordTokenExpiry DateTime?
  changePasswordToken       String?                             @db.VarChar(255)
  chagePasswordTokenExpiry  DateTime?
  role                      Role                                @default(USER)
  personalInformation       PersonalInformation?                @relation(fields: [personalInformationId], references: [id])
  personalInformationId     Int? @unique
  addresses                 Address[]
  blogCategories            BlogCategory[]                      @relation("UserBlogCategories")
  blogPosts                 BlogPost[]                          @relation("UserBlogPosts")
  blogComments              BlogComments[]                      @relation("UserBlogComments")
  blogLikes                 BlogLikes[]                         @relation("UserBlogLikes")
  blogViews                 BlogView[]                          @relation("UserBlogViews")
  carts                     Cart[]
  bookings                  Booking[]
  @@unique([id, role], map: "unique_admin")
}

model PersonalInformation {
  id          Int      @id @default(autoincrement())
  firstname   String
  lastname    String
  dob         DateTime
  profile_pic String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User?
}

model Address {
  id                  Int      @id @default(autoincrement())
  addressline         String  
  addressline2        String? 
  city                String  
  state               String  
  postalCode          String  
  country             String   @default("INDIA") 
  userId              Int      
  user                User     @relation(fields: [userId], references: [id])
  isDefault           Boolean  @default(false) 
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  bookings            Booking[] 
  @@index([userId, isDefault])
}



model PujaService {
  id             Int          @id @default(autoincrement())
  title          String
  img            String
  desc           String       @db.VarChar(10000) 
  category       PujaCategory @relation(fields: [categoryId], references: [id])
  categoryId     Int
  date_of_create DateTime     @default(now())
  packages       Package[]    @relation("PujaServicePackages")
  carts          Cart[]
}

model PujaCategory {
  id        Int          @id @default(autoincrement())
  name      String       @unique
  services  PujaService[]
}

model Package {
  id             Int          @id @default(autoincrement())
  location       String
  language       String
  type           String
  price          Float
  description    String       @db.VarChar(10000)
  pujaService    PujaService  @relation(fields: [pujaServiceId], references: [id], name: "PujaServicePackages")
  pujaServiceId  Int
  carts          Cart[]
}

model PujaBooking {
  id             Int      @id @default(autoincrement())
  city           String
  pujaName       String
  language       String
  date           DateTime
  time           String
  location       String
  contactNumber  String
  email          String  
}

model AstrologyService {
  id            Int      @id @default(autoincrement())
  service_title String
  service_image String
  service_type  String
  service_price Float
  service_desc  String    @db.VarChar(5000)
  timestamp     DateTime  @default(now())
}

model AstrologyBooking {
  id              Int      @id @default(autoincrement())
  language        String
  preferredDate   DateTime
  preferredTime   DateTime
  birthPlace      String
  birthDate       DateTime
  birthTime       DateTime
  gender          String
  questions       String?  // Optional field for questions
  createdAt       DateTime  @default(now())
}

model BlogCategory {
  id                 Int              @id @default(autoincrement())
  user               User             @relation(fields: [user_id], references: [id], name: "UserBlogCategories")
  user_id            Int
  category_name      String
  category_slug      String           @unique
  meta_title         String
  meta_keyword       String
  meta_description   String
  publication_status Status           @default(FALSE)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @default(now())
  blogPosts          BlogPost[]       @relation("CategoryBlogPosts")
}

model BlogPost {
  id                 Int              @id @default(autoincrement())
  user               User             @relation(fields: [user_id], references: [id], name: "UserBlogPosts")
  user_id            Int
  category           BlogCategory     @relation(fields: [category_id], references: [id], name: "CategoryBlogPosts")
  category_id        Int
  post_title         String
  post_slug          String           @unique
  post_description   String
  featured_image     String
  youtube_url        String?
  publication_status Status           @default(FALSE)
  is_featured        Boolean          @default(false)
  view_count         Int              @default(0)
  meta_title         String
  meta_keyword       String
  meta_description   String
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @default(now())
  blogTags           BlogPost_tag[]   @relation("PostBlogTags")
  blogComments       BlogComments[]   @relation("PostBlogComments")
  blogLikes          BlogLikes[]      @relation("PostBlogLikes")
  blogViews          BlogView[]       @relation("PostBlogViews")
}

model BlogTag {
  id                 Int              @id @default(autoincrement())
  tag_name           String           @unique
  publication_status Status           @default(FALSE)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @default(now())
  blogPosts          BlogPost_tag[]   @relation("TagBlogPosts")
}

model BlogPost_tag {
  id       Int      @id @default(autoincrement())
  post     BlogPost @relation(fields: [post_id], references: [id], name: "PostBlogTags")
  post_id  Int
  tag      BlogTag  @relation(fields: [tag_id], references: [id], name: "TagBlogPosts")
  tag_id   Int
}

model BlogComments {
  id           Int       @id @default(autoincrement())
  post         BlogPost  @relation(fields: [post_id], references: [id], name: "PostBlogComments")
  post_id      Int
  user         User      @relation(fields: [user_id], references: [id], name: "UserBlogComments")
  user_id      Int
  comment_text String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now())
}

model BlogLikes {
  id        Int       @id @default(autoincrement())
  post      BlogPost  @relation(fields: [post_id], references: [id], name: "PostBlogLikes")
  post_id   Int
  user      User      @relation(fields: [user_id], references: [id], name: "UserBlogLikes")
  user_id   Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
}

model BlogView {
  id        Int       @id @default(autoincrement())
  post      BlogPost  @relation(fields: [post_id], references: [id], name: "PostBlogViews")
  post_id   Int
  user      User      @relation(fields: [user_id], references: [id], name: "UserBlogViews")
  user_id   Int
  createdAt DateTime  @default(now())
}

model PrivacyPolicy {
  id         Int      @id @default(autoincrement())
  title      String
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model TermsOfService {
  id         Int      @id @default(autoincrement())
  title      String
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Cart {
  id            Int          @id @default(autoincrement())
  user          User         @relation(fields: [userId], references: [id])
  userId        Int
  pujaService   PujaService  @relation(fields: [pujaServiceId], references: [id])
  pujaServiceId Int
  package       Package      @relation(fields: [packageId], references: [id])
  packageId     Int
  selected_date DateTime
  selected_time String
  createdAt     DateTime     @default(now())
  promoCode     PromoCode?   @relation(fields: [promoCodeId], references: [id])
  promoCodeId   Int?
  cartId        String       @unique
  status        Status       @default(TRUE)
  bookings      Booking[]
}

model PromoCode {
  id          Int      @id @default(autoincrement())
  code        String   @unique
  discount    Float
  expiryDate  DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  carts       Cart[]
}

model Booking {
  id                 Int           @id @default(autoincrement())
  user               User          @relation(fields: [userId], references: [id])
  userId             Int
  cart               Cart          @relation(fields: [cartId], references: [id])
  cartId             Int
  BookId             String
  selected_date      String
  selected_time      String
  addresses          Address       @relation(fields: [addressId], references: [id])
  addressId          Int        
  status             BookingStatus @default(PENDING)
  cancellationReason String?
  failureReason      String?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  payments           Payment[]
}

model Payment {
  id                  Int             @id @default(autoincrement())
  booking             Booking         @relation(fields: [bookingId], references: [id])
  bookingId           Int
  transactionId       String
  amount              Float
  method              String
  status              String
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  FAILED
  DONE
}

model Gallery {
  id              Int             @id @default(autoincrement())
  image           String
  galleryCategory GalleryCategory @relation(fields: [galleryCategoryId], references: [id])
  galleryCategoryId Int
  popularity      Int
  status          String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model GalleryCategory {
  id        Int      @id @default(autoincrement())
  title     String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  galleries Gallery[]
}

model CancellationRefundPolicy {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobOpening {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  deadline    DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Event {
  id        Int      @id @default(autoincrement())
  imagesrc  String
  title     String
  day       String
  number    Int
  month     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}